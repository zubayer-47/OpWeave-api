// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id  String  @id @default(uuid())
  fullname String  @db.VarChar(100)
  username String  @unique @db.VarChar(100)
  email    String  @unique
  password String
  gender   Gender
  avatar   String?

  members member[]

  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  banned_user banned_user[]

  @@index([username, email])
}

model community {
  community_id String @id @default(uuid())
  name         String @unique
  bio          String
  rules        String // discuss about it

  members member[]
  posts   post[]

  createdBy   String? // (member_id, user_id)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  banned_user banned_user[]
}

model member {
  member_id String @id @default(uuid())

  user    user   @relation(fields: [user_id], references: [user_id])
  user_id String

  community    community @relation(fields: [community_id], references: [community_id])
  community_id String

  role    MemberRole @default(MEMBER)
  scopes  Scopes     @default(VIEWER)
  isMuted Boolean    @default(false)

  posts         post[]
  reacts        react[]
  comments      comment[]
  user_comments userComment[]

  joinedAt    DateTime      @default(now())
  leavedAt    DateTime?
  banned_user banned_user[]
}

model post {
  post_id String @id @default(uuid())

  community    community @relation(fields: [community_id], references: [community_id])
  community_id String

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  title        String
  body         String
  hasPublished Boolean
  isVisible    Boolean @default(true)

  reacts   react[]
  comments comment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  // TODO: 01/01 remove it
  deletedBy String? // store adminID/moderatorID/ownerID (memberID, userID)
}

model banned_user {
  banned_user_id String @id @default(uuid())

  user    user   @relation(fields: [user_id], references: [user_id])
  user_id String

  community    community @relation(fields: [community_id], references: [community_id])
  community_id String

  member   member @relation(fields: [bannedBy], references: [member_id])
  bannedBy String

  ban_reason String
  ban_date   DateTime
}

model react {
  react_id String @id @default(uuid())

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  post    post   @relation(fields: [post_id], references: [post_id])
  post_id String

  react_type ReactType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model comment {
  comment_id String @id @default(uuid())

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  post          post          @relation(fields: [post_id], references: [post_id])
  post_id       String
  user_comments userComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model userComment {
  user_c_id String @id @default(uuid())

  comment    comment @relation(fields: [comment_id], references: [comment_id])
  comment_id String

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  content   String
  status    CommentStatus @default(MAIN)
  createdAt DateTime      @default(now())
}

enum CommentStatus {
  MAIN
  REPLY
}

enum ReactType {
  LIKE
  UNLIKE
}

enum Scopes {
  ROOT
  EDITOR
  VIEWER
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum Gender {
  MALE
  FEMALE
}
