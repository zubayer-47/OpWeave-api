// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id  String  @id @default(uuid())
  fullname String  @db.VarChar(100)
  username String  @unique @db.VarChar(100)
  email    String  @unique
  password String
  gender   Gender
  avatar   String?
  bio      String?

  members member[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // banned_member banned_member[]

  @@index([username, email])
}

model community {
  community_id String @id @default(uuid())
  name         String @unique
  bio          String
  rules        rule[]
  description  String
  avatar       String

  members member[]
  posts   post[]

  createdBy String? // member_id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  // banned_member banned_member[]
}

model rule {
  rule_id      String     @id @default(uuid())
  title        String     @unique
  body         String
  order        Int
  community    community? @relation(fields: [community_id], references: [community_id])
  community_id String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model member {
  member_id String @id @default(uuid())

  user    user   @relation(fields: [user_id], references: [user_id])
  user_id String

  community    community @relation(fields: [community_id], references: [community_id], onDelete: Cascade)
  community_id String

  role    MemberRole @default(MEMBER)
  scopes  Scopes     @default(VIEWER)
  isMuted Boolean    @default(false)

  posts         post[]
  reacts        react[]
  comments      comment[]
  user_comments userComment[]

  joinedAt DateTime  @default(now())
  leavedAt DateTime?
  // banned_member banned_member[] @relation("member_id")
  // bannedBy      banned_member[] @relation("bannedBy")
}

model post {
  post_id String @id @default(uuid())

  community    community @relation(fields: [community_id], references: [community_id])
  community_id String

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  body         String
  image_url    String?
  hasPublished Boolean
  isVisible    Boolean @default(true)

  reacts   react[]
  comments comment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  // TODO: 01/01 remove it
  deletedBy String? // store adminID/moderatorID/ownerID (memberID, userID)
}

// TODO: 4/1 analysis it with AI and fix it
// model banned_member {
//   ban_id String @id @default(uuid())

//   member    member? @relation("member_id", fields: [member_id], references: [member_id])
//   member_id String

//   banner   member? @relation("bannedBy", fields: [bannedBy], references: [member_id])
//   bannedBy String

//   user        user?   @relation(fields: [userUser_id], references: [user_id])
//   userUser_id String?

//   community    community @relation(fields: [community_id], references: [community_id])
//   community_id String

//   ban_reason String
//   ban_date   DateTime
// }

// example
// model User {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   firstName String?
//   lastName  String?
//   email     String    @unique
//   role      String    @default("user")
//   picture   String?
//   reporter  Absence[] @relation("reporter")
//   requester Absence[] @relation("user")
// }

// model Absence {
//   id         Int      @id @default(autoincrement())
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   approved   Boolean  @default(false)
//   user       User     @relation("user", fields: [userId], references: [id])
//   userId     Int
//   reporter   User     @relation("reporter", fields: [reporterId], references: [id])
//   reporterId Int
//   from       DateTime
//   to         DateTime
//   notes      String?
// }

model react {
  react_id String @id @default(uuid())

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  post    post   @relation(fields: [post_id], references: [post_id])
  post_id String

  react_type ReactType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model comment {
  comment_id String @id @default(uuid())

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  post          post          @relation(fields: [post_id], references: [post_id])
  post_id       String
  user_comments userComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model userComment {
  user_c_id String @id @default(uuid())

  comment    comment @relation(fields: [comment_id], references: [comment_id])
  comment_id String

  member    member @relation(fields: [member_id], references: [member_id])
  member_id String

  content   String
  status    CommentStatus @default(MAIN)
  createdAt DateTime      @default(now())
}

enum CommentStatus {
  MAIN
  REPLY
}

enum ReactType {
  LIKE
  UNLIKE
}

enum Scopes {
  ROOT
  EDITOR
  VIEWER
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum Gender {
  MALE
  FEMALE
}
