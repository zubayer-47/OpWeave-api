generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id            String               @id @default(uuid())
  fullname           String               @db.VarChar(100)
  username           String               @unique @db.VarChar(100)
  email              String               @unique
  password           String
  gender             Gender
  avatar             String?
  bio                String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  bookmarks          bookmark[]
  members            member[]
  passwordResetToken passwordResetToken[]

  @@index([username, email])
}

model passwordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user_id   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      user     @relation(fields: [user_id], references: [user_id])
}

model community {
  community_id String    @id @default(uuid())
  name         String    @unique
  bio          String
  description  String
  avatar       String
  createdBy    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  members      member[]
  posts        post[]
  rules        rule[]
}

model rule {
  rule_id      String     @id @default(uuid())
  title        String     @unique
  body         String
  community_id String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  community    community? @relation(fields: [community_id], references: [community_id])
}

model member {
  member_id    String             @id @default(uuid())
  user_id      String
  community_id String
  role         MemberRole         @default(MEMBER)
  restricts    MemberRestrictions @default(PUBLIC)
  banUntil     DateTime?
  joinedAt     DateTime           @default(now())
  leavedAt     DateTime?
  comments     comment[]
  community    community          @relation(fields: [community_id], references: [community_id], onDelete: Cascade)
  user         user               @relation(fields: [user_id], references: [user_id])
  posts        post[]
  reacts       react[]
}

model post {
  post_id      String     @id @default(uuid())
  community_id String
  member_id    String
  body         String
  image_url    String?
  image_height Int?
  hasPublished Boolean
  isVisible    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  deletedBy    String?
  bookmarks    bookmark[]
  comments     comment[]
  community    community  @relation(fields: [community_id], references: [community_id])
  member       member     @relation(fields: [member_id], references: [member_id])
  reacts       react[]
}

model bookmark {
  bookmark_id String   @id @default(uuid())
  user_id     String
  post_id     String
  createdAt   DateTime @default(now())
  post        post     @relation(fields: [post_id], references: [post_id])
  user        user     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, post_id])
}

model react {
  react_id   String    @id @default(uuid())
  member_id  String
  post_id    String
  react_type ReactType @default(UNLIKE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  member     member    @relation(fields: [member_id], references: [member_id])
  post       post      @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
}

model comment {
  comment_id        String    @id @default(uuid())
  body              String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  member_id         String
  post_id           String
  parent_comment_id String?
  member            member    @relation(fields: [member_id], references: [member_id])
  parent_comment    comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [comment_id])
  replies           comment[] @relation("CommentReplies")
  post              post      @relation(fields: [post_id], references: [post_id])
}

enum MemberRestrictions {
  BAN
  MUTE
  PUBLIC
}

enum CommentStatus {
  MAIN
  REPLY
}

enum ReactType {
  LIKE
  UNLIKE
}

enum Scopes {
  ROOT
  EDITOR
  VIEWER
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum Gender {
  MALE
  FEMALE
}
